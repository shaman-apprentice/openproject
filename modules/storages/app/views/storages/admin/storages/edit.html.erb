<%#-- copyright
OpenProject is an open source project management software.
Copyright (C) 2012-2023 the OpenProject GmbH

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License version 3.

OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
Copyright (C) 2006-2013 Jean-Philippe Lang
Copyright (C) 2010-2013 the ChiliProject Team

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

See COPYRIGHT and LICENSE files for more details.

++#%>

<% html_title t(:label_administration), t("project_module_storages"), t('label_edit_x', x: @storage.name) %>



    
<% if OpenProject::FeatureDecisions.storage_primer_design_active? %>

  <%= render(Primer::Beta::Breadcrumbs.new) do |component|
    component.with_item(href: "admin/settings") { "Administration" }
    component.with_item(href: "admin/settings/storages") { "File Storages" }
    component.with_item(href: "admin/settings/storages/#{@storage.id}/edit") { @storage.name }
  end %>

  <%= render(Primer::OpenProject::PageHeader.new) do |header| %>

    <% header.with_title(test_selector: 'storage-name-title') do %>
      <%= render(OpPrimer::BackButtonComponent.new(href: url_for(controller: '/storages/admin/storages', action: :index))) %>
      <%= @storage.name %>
    <% end %>

    <% header.with_actions do %>
      <%= render(Storages::Admin::StorageButtonComponent.new(@storage, action: :delete)) %>
    <% end %>
  <% end %>

  <%= render(::Storages::Admin::StorageViewComponent.new(@storage)) %>
<% else %>
  <% local_assigns[:additional_breadcrumb] = @storage.name %>
  <%= toolbar title: t('label_edit_x', x: @storage.name) %>

  <%= render(::Storages::Admin::ConfigurationChecksComponent.new(storage: @storage)) %>

  <%= labelled_tabular_form_for @storage, url: admin_settings_storage_path(@storage), as: :storages_storage do |f| -%>
    <%= render partial: "storages/admin/storages/#{@storage.short_provider_type}/edit", locals: { f: f } %>
    <%= styled_button_tag t(:button_save), class: "-highlight -with-icon icon-checkmark" %>
  <% end %>

  <% if @storage.oauth_application %>
    <%= render(AttributeGroups::AttributeGroupComponent.new) do |component| %>
      <% component.with_header(title: "OpenProject #{t(:'storages.label_oauth_application_details')}") %>

      <% component.with_attributes([
                                    { key: "OpenProject #{Storages::Admin::LABEL_OAUTH_CLIENT_ID}", value: @storage.oauth_application.uid },
                                    { key: "OpenProject #{Storages::Admin::LABEL_OAUTH_CLIENT_SECRET}", value: "●●●●●●●●●●●●●●●●" },
                                  ]) %>

      <%= link_to(t("storages.buttons.replace_openproject_oauth"),
                  replace_oauth_application_admin_settings_storage_path(@storage),
                  method: :delete,
                  data: { confirm: t(:'storages.confirm_replace_oauth_application') },
                  class: 'button -with-icon icon-reload') %>
    <% end %>
  <% end %>

  <%= render partial: "storages/admin/storages/#{@storage.short_provider_type}/oauth_client_section" %>

  <% if @storage.provider_type_nextcloud? %>
    <%= render(AttributeGroups::AttributeGroupComponent.new) do |component| %>
      <% component.with_header(title: t("storages.page_titles.managed_project_folders.title")) %>

      <% if @storage.automatic_management_unspecified? %>
        <%= link_to(t("storages.buttons.configure"), new_admin_settings_storage_automatically_managed_project_folders_path(@storage), class: 'button -with-icon icon-add') %>
      <% else %>
        <% component.with_attribute(
            key: t(:"storages.label_managed_project_folders.automatically_managed_folders"),
            value: @storage.automatically_managed? ? t(:"storages.label_active") : t(:"storages.label_inactive")
          ) %>

        <% if @storage.automatically_managed? %>
          <% component.with_attribute(
              key: t(:"storages.label_managed_project_folders.application_password"),
              value: "●●●●●●●●●●●●●●●●"
            ) %>
        <% end %>

        <%= link_to(t("storages.buttons.edit_automatically_managed_project_folders"),
                    edit_admin_settings_storage_automatically_managed_project_folders_path(@storage),
                    class: 'button -with-icon icon-edit') %>
      <% end %>
    <% end %>
  <% end %>
<% end %>
